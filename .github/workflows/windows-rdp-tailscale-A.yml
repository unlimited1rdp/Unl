name: Windows RDP via Tailscale (A)
true:
  workflow_dispatch:
    inputs:
      ts_tailnet:
        description: Tailscale tailnet (e.g. you@gmail.com)
        required: true
      ts_api_key:
        description: Tailscale API key (device admin, no 'Bearer')
        required: true
      ts_authkey:
        description: Tailscale auth key (reusable or ephemeral)
        required: true
      gh_api_token:
        description: 'GitHub Personal Access Token (classic; scopes: repo, workflow)'
        required: true
      test_mode:
        description: Run 5-minute test loop
        type: boolean
        default: false
      runtime_minutes:
        description: Runtime in minutes (max 360; capped to 355)
        required: false
        default: '355'
      loops:
        description: How many handoffs (0 = infinite)
        required: false
        default: '0'
concurrency:
  group: tailscale-rdp-singleton
  cancel-in-progress: false
permissions:
  contents: read
  actions: write
defaults:
  run:
    shell: pwsh
env:
  RDP_USER: Manjeet
  RDP_PASS: GOD_MANJEET
  TS_HOSTNAME: Manjeet
jobs:
  rdp:
    runs-on: windows-2022
    timeout-minutes: 370
    steps:
    - name: "\U0001F527 Resolve inputs (safe)"
      id: cfg
      env:
        RAW_TAILNET: ${{ inputs.ts_tailnet }}
        RAW_APIKEY: ${{ inputs.ts_api_key }}
        RAW_AUTHKEY: ${{ inputs.ts_authkey }}
        RAW_PAT: ${{ inputs.gh_api_token }}
        RAW_TEST: ${{ inputs.test_mode == true && 'true' || 'false' }}
        RAW_RUNTIME: ${{ inputs.runtime_minutes || '355' }}
        RAW_LOOPS: ${{ inputs.loops || '0' }}
      run: "function ToIntOr($v, $def){ if(\"$v\" -match '^\\d+$'){[int]$v}else{[int]$def}\
        \ }\n\n$tailnet = $env:RAW_TAILNET\n$apiKey  = $env:RAW_APIKEY\n$authKey =\
        \ $env:RAW_AUTHKEY\n$pat     = $env:RAW_PAT\nif (-not $tailnet -or -not $apiKey\
        \ -or -not $authKey -or -not $pat) {\n  Write-Error \"Missing required inputs\"\
        ; exit 1\n}\n\n# Robust boolean\n$isTest = ($env:RAW_TEST -match '^(?i:true|1|yes|on)$')\n\
        \n$runtime = ToIntOr $env:RAW_RUNTIME 355\nif ($isTest) { $runtime = 5 }\n\
        \n# Ensure ~6h (355) when test_mode is off and value is too small\nif (-not\
        \ $isTest -and $runtime -lt 6) { $runtime = 355 }\nif ($runtime -gt 360) {\
        \ $runtime = 355 }\n\n$loops = ToIntOr $env:RAW_LOOPS 0\nif ($loops -lt 0)\
        \ { $loops = 0 }\n\n\"tailnet=$tailnet\" | Out-File -Append $env:GITHUB_OUTPUT\n\
        \"apikey=$apiKey\"   | Out-File -Append $env:GITHUB_OUTPUT\n\"authkey=$authKey\"\
        \ | Out-File -Append $env:GITHUB_OUTPUT\n\"pat=$pat\"         | Out-File -Append\
        \ $env:GITHUB_OUTPUT\n\"runtime=$runtime\" | Out-File -Append $env:GITHUB_OUTPUT\n\
        \"loops=$loops\"     | Out-File -Append $env:GITHUB_OUTPUT\nWrite-Host \"\
        Resolved: test=$isTest, runtime=$runtime, loops=$loops\"\n"
    - name: "\u2699\uFE0F Install Tailscale (if missing) & show version"
      run: "$exe = \"C:\\Program Files\\Tailscale\\tailscale.exe\"\nif (-not (Test-Path\
        \ $exe)) {\n  $url = 'https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe'\n\
        \  $dst = \"$env:TEMP\\tailscale-setup.exe\"\n  Invoke-WebRequest -Uri $url\
        \ -OutFile $dst -UseBasicParsing\n  Start-Process -FilePath $dst -ArgumentList\
        \ \"/quiet\" -Wait\n}\nStart-Service Tailscale -ErrorAction SilentlyContinue\n\
        & \"C:\\Program Files\\Tailscale\\tailscale.exe\" version\n"
    - name: "\U0001F510 Enable RDP user + firewall"
      run: "$u=\"${{ env.RDP_USER }}\"; $p=\"${{ env.RDP_PASS }}\"\n$sec = ConvertTo-SecureString\
        \ $p -AsPlainText -Force\nif (-not (Get-LocalUser -Name $u -ErrorAction SilentlyContinue))\
        \ {\n  New-LocalUser -Name $u -Password $sec -AccountNeverExpires\n  Add-LocalGroupMember\
        \ -Group Administrators -Member $u\n  Add-LocalGroupMember -Group \"Remote\
        \ Desktop Users\" -Member $u\n} else {\n  Set-LocalUser -Name $u -Password\
        \ $sec -AccountNeverExpires\n  Enable-LocalUser -Name $u\n}\nSet-ItemProperty\
        \ \"HKLM:\\System\\CurrentControlSet\\Control\\Terminal Server\" -Name fDenyTSConnections\
        \ -Value 0\nEnable-NetFirewallRule -DisplayGroup \"Remote Desktop\" | Out-Null\n"
    - name: "\U0001F9F9 PURGE any devices containing 'bullet' (startup)"
      run: "$hdr = @{ Authorization = \"Bearer ${{ steps.cfg.outputs.apikey }}\" }\n\
        $tn  = [uri]::EscapeDataString(\"${{ steps.cfg.outputs.tailnet }}\")\n$match\
        \ = { param($d)\n  ($d.name -match '(?i)bullet') -or ($d.hostname -match '(?i)bullet')\
        \ -or ($d.DNSName -match '(?i)bullet')\n}\ntry {\n  $resp = Invoke-RestMethod\
        \ -Method GET -Headers $hdr -Uri \"https://api.tailscale.com/api/v2/tailnet/$tn/devices\"\
        \n  foreach ($d in $resp.devices) {\n    if (& $match $d) {\n      try {\n\
        \        Invoke-RestMethod -Method DELETE -Headers $hdr -Uri (\"https://api.tailscale.com/api/v2/device/{0}\"\
        \ -f $d.id) | Out-Null\n        Write-Host \"Deleted at start: $($d.name)\"\
        \n      } catch {}\n    }\n  }\n} catch { Write-Warning \"Startup purge failed:\
        \ $_\" }\n"
    - name: "\U0001F517 Tailscale up (hostname=bullet) + show IP/FQDN/DERP"
      id: up
      run: '$ts = "C:\Program Files\Tailscale\tailscale.exe"

        & $ts logout | Out-Null

        & $ts up --authkey "${{ steps.cfg.outputs.authkey }}" --hostname "${{ env.TS_HOSTNAME
        }}" --accept-routes --accept-dns=false

        Start-Sleep -Seconds 2


        $ip4 = (& $ts ip -4 | Select-Object -First 1)

        $status = & $ts status --json | ConvertFrom-Json

        $fqdn = $status.Self.DNSName

        $derp = $status.Self.DERP

        "ip4=$ip4"   | Out-File -Append $env:GITHUB_OUTPUT

        "fqdn=$fqdn" | Out-File -Append $env:GITHUB_OUTPUT

        "derp=$derp" | Out-File -Append $env:GITHUB_OUTPUT


        "### RDP (A)`nHost: $env:TS_HOSTNAME`nIPv4: $ip4`nMagicDNS: $fqdn`nDERP: $derp`nUser:
        $env:RDP_USER`nPass: $env:RDP_PASS" | Out-File $env:GITHUB_STEP_SUMMARY -Append
        -Encoding utf8

        '
    - name: "\u23F3 Keep alive"
      run: "$mins=[int]\"${{ steps.cfg.outputs.runtime }}\"\n$end=(Get-Date).AddMinutes($mins)\n\
        while((Get-Date) -lt $end){\n  $left=[int]([math]::Ceiling(($end-(Get-Date)).TotalMinutes))\n\
        \  Write-Host \"RDP alive... ($left min left)\"\n  Start-Sleep -Seconds 60\n\
        }\n"
    - name: "\U0001F9F9 PURGE any devices containing 'bullet' (exit)"
      if: always()
      run: "$hdr = @{ Authorization = \"Bearer ${{ steps.cfg.outputs.apikey }}\" }\n\
        $tn  = [uri]::EscapeDataString(\"${{ steps.cfg.outputs.tailnet }}\")\n$match\
        \ = { param($d)\n  ($d.name -match '(?i)bullet') -or ($d.hostname -match '(?i)bullet')\
        \ -or ($d.DNSName -match '(?i)bullet')\n}\ntry {\n  $resp = Invoke-RestMethod\
        \ -Method GET -Headers $hdr -Uri \"https://api.tailscale.com/api/v2/tailnet/$tn/devices\"\
        \n  foreach ($d in $resp.devices) {\n    if (& $match $d) {\n      try {\n\
        \        Invoke-RestMethod -Method DELETE -Headers $hdr -Uri (\"https://api.tailscale.com/api/v2/device/{0}\"\
        \ -f $d.id) | Out-Null\n        Write-Host \"Deleted at exit: $($d.name)\"\
        \n      } catch {}\n    }\n  }\n} catch { Write-Warning \"Exit purge failed:\
        \ $_\" }\n"
    - name: "\U0001F501 Dispatch workflow B (instant, forever by default)"
      if: always()
      run: "$loops=[int]\"${{ steps.cfg.outputs.loops }}\"\nif ($loops -eq 1) { Write-Host\
        \ \"Loops finished; not dispatching.\"; exit 0 }\nif ($loops -gt 1) { $next=$loops-1\
        \ } else { $next=0 }\n\n$token=\"${{ steps.cfg.outputs.pat }}\"\n$body=@{\n\
        \  ref    = \"${{ github.ref_name }}\"\n  inputs = @{\n    ts_tailnet    \
        \  = \"${{ steps.cfg.outputs.tailnet }}\"\n    ts_api_key      = \"${{ steps.cfg.outputs.apikey\
        \ }}\"\n    ts_authkey      = \"${{ steps.cfg.outputs.authkey }}\"\n    gh_api_token\
        \    = \"$token\"\n    test_mode       = \"false\"\n    runtime_minutes =\
        \ \"${{ steps.cfg.outputs.runtime }}\"\n    loops           = \"$next\"\n\
        \  }\n} | ConvertTo-Json -Depth 5\n\nInvoke-RestMethod -Method POST `\n  -Uri\
        \ \"https://api.github.com/repos/${{ github.repository }}/actions/workflows/windows-rdp-tailscale-B.yml/dispatches\"\
        \ `\n  -Headers @{ Authorization = \"Bearer $token\"; \"Accept\"=\"application/vnd.github+json\"\
        \ } `\n  -Body $body"
